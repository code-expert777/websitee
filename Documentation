Documentation for Quran Info Website with Chatbot
Introduction

This documentation outlines the structure and implementation of a Quran information website that incorporates a chatbot for handling service inquiries and contact information. The website is built using HTML and CSS for the frontend, FastAPI for the backend, Dialogflow for natural language processing (NLP), and MySQL with PHP for the database.
Frontend
HTML

The HTML files form the structure of the website, including:

    index.html: The homepage of the Quran information service.
    services.html: Page that details the various services offered.
    contact.html: Page that provides contact information.
    chatbot.html: Page where users interact with the chatbot.

Example index.html:

html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Quran Info</title>
</head>
<body>
    <header>
        <h1>Welcome to Quran Info</h1>
    </header>
    <nav>
        <ul>
            <li><a href="index.html">Home</a></li>
            <li><a href="services.html">Services</a></li>
            <li><a href="contact.html">Contact</a></li>
            <li><a href="chatbot.html">Chat with Us</a></li>
        </ul>
    </nav>
    <main>
        <p>Learn more about the Quran and our services.</p>
    </main>
    <footer>
        <p>&copy; 2024 Quran Info</p>
    </footer>
</body>
</html>

CSS

CSS files are used to style the website and enhance the user experience. Common files include:

    styles.css: Contains the main styles for the website.
    chatbot.css: Specific styles for the chatbot interface.

Example styles.css:

css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f0f0;
}

header {
    background-color: #008080;
    color: white;
    padding: 10px 0;
    text-align: center;
}

nav ul {
    list-style: none;
    padding: 0;
}

nav ul li {
    display: inline;
    margin: 0 10px;
}

nav ul li a {
    text-decoration: none;
    color: #008080;
}

main {
    padding: 20px;
}

footer {
    background-color: #008080;
    color: white;
    text-align: center;
    padding: 10px 0;
    position: absolute;
    bottom: 0;
    width: 100%;
}

Backend
FastAPI

FastAPI is used to handle backend operations such as:

    Handling API requests for service information and contact details.
    Integrating with Dialogflow to process chatbot queries.
    Interacting with the MySQL database to retrieve and store relevant information.

Example code snippet for FastAPI integration:

python

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import mysql.connector
from google.cloud import dialogflow_v2 as dialogflow

app = FastAPI()

@app.post("/services_info")
async def services_info(request: Request):
    # Code to handle service information requests
    data = await request.json()
    # Fetch data from MySQL
    # ...

@app.post("/contact_info")
async def contact_info(request: Request):
    # Code to handle contact information requests
    data = await request.json()
    # Fetch data from MySQL
    # ...

@app.post("/webhook")
async def webhook(request: Request):
    # Handle webhook from Dialogflow
    req = await request.json()
    intent = req["queryResult"]["intent"]["displayName"]
    if intent == "Service Info":
        return await services_info(request)
    elif intent == "Contact Info":
        return await contact_info(request)
    else:
        return JSONResponse(content={"fulfillmentText": "I'm not sure how to help with that."})

NLP: Dialogflow

Dialogflow is used for natural language processing, enabling the chatbot to understand and respond to user queries. It handles:

    Intent recognition for service and contact information.
    Entity extraction to understand details such as service names and contact methods.
    Webhook integration to communicate with the FastAPI backend.

Database
MySQL with PHP

MySQL is used to store information about services and contact details. PHP scripts handle database interactions:

    get_services.php: Retrieves information about services offered.
    get_contact.php: Retrieves contact information.

Example PHP code to interact with the database:

php

<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "quran_info";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getServices() {
    global $conn;
    $sql = "SELECT * FROM services";
    $result = $conn->query($sql);
    $services = [];
    while($row = $result->fetch_assoc()) {
        $services[] = $row;
    }
    return $services;
}

function getContact() {
    global $conn;
    $sql = "SELECT * FROM contact";
    $result = $conn->query($sql);
    $contact = $result->fetch_assoc();
    return $contact;
}
?>

Improving and Adding Features to the Chatbot

To enhance the chatbot, consider implementing the following features:

    Extended Information Retrieval:
        Provide detailed information about each service, including timings, prerequisites, and benefits.
        Allow users to request additional materials such as brochures or links to relevant articles.

    User Feedback and Support:
        Integrate a feedback mechanism for users to rate their experience and provide comments.
        Include FAQs and support for common queries related to the Quran and services.

    Personalization and Recommendations:
        Use past interactions to provide personalized recommendations and follow-ups.
        Implement greetings and acknowledgments that reflect the user's history with the service.

    Advanced NLP Capabilities:
        Enhance the chatbot's ability to understand and respond to a wider range of questions and variations.
        Use machine learning models to improve intent recognition and response accuracy over time.

Example Dialogflow intent configuration for detailed service information:

json

{
  "name": "projects/project-id/agent/intents/intent-id",
  "displayName": "Detailed Service Info",
  "trainingPhrases": [
    {
      "parts": [
        {
          "text": "Tell me more about the Quran recitation service"
        }
      ]
    },
    {
      "parts": [
        {
          "text": "What are the details of the Quran translation service?"
        }
      ]
    }
  ],
  "parameters": [
    {
      "name": "service_name",
      "displayName": "service_name",
      "value": "$service_name",
      "entityTypeDisplayName": "@service_name"
    }
  ],
  "messages": [
    {
      "text": {
        "text": [
          "The $service_name service includes the following details: ..."
        ]
      }
    }
  ]
}

By implementing these features, the chatbot can offer a more comprehensive and user-friendly experience, improving overall user satisfaction and engagement.
